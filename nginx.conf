events {
    worker_connections 1024;
}

http {
    # Add error logging to see rate limiting messages
    error_log /var/log/nginx/error.log info;
    access_log /var/log/nginx/access.log;
    
    # Set real IP for rate limiting (important for Docker)
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 10.0.0.0/8;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Rate limiting zones for different endpoints
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;        # 5 login attempts per minute
    limit_req_zone $binary_remote_addr zone=register:10m rate=2r/m;     # 2 registrations per minute
    limit_req_zone $binary_remote_addr zone=password_reset:10m rate=3r/m; # 3 password resets per minute
    
    upstream backend {
        server fastify_backend:5001;
    }
    
    upstream frontend {
        server nextjs_frontend:3000;
    }
    
    server {
        listen 80;
        client_max_body_size 10M;
        
        # Custom rate limit exceeded response
        error_page 429 @rate_limit_exceeded;
        location @rate_limit_exceeded {
            add_header Content-Type application/json always;
            return 429 '{"error": "Rate limit exceeded", "message": "Too many requests, please try again later", "retry_after": 30}';
        }
        
        # WebSocket proxy
        location /ws/ {
            proxy_pass http://backend/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Rate limited login endpoint
        location /api/login {
            limit_req zone=login burst=2 nodelay;
            limit_req_status 429;
            
            proxy_pass http://backend/login;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Rate limited registration endpoint
        location /api/register {
            limit_req zone=register burst=1 nodelay;
            limit_req_status 429;
            
            proxy_pass http://backend/register;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Rate limited password reset endpoint
        location /api/forgot-password {
            limit_req zone=password_reset burst=1 nodelay;
            limit_req_status 429;
            
            proxy_pass http://backend/forgot-password;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Other API requests with no rate limiting
        location /api/ {
            proxy_pass http://backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Frontend
        location / {
            proxy_pass http://frontend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
